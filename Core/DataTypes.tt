<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// DataTypes.cs

using System;
using System.Numerics;

namespace Foundations.Geometry
{
<#
GeometryTypes("Empty", "Point", "Line", "Ray", "Segment", "Circle");

Class("Empty", Options.All);
Class("Point", Options.All, "Z", "X", "Z", "Y", "Z", "W");
Class("Line", Options.All, "Z", "A", "Z", "B", "Z", "C");
Class("Ray", Options.All, "Point", "Source", "Direction", "Direction");
Class("Segment", Options.All, "Point", "Source", "Point", "Target");
Class("Circle", Options.All, "Point", "Center", "Q", "SquaredRadius");

Class("Q", Options.All, "Z", "N", "Z", "D");
Class("Vector", Options.All, "Z", "X", "Z", "Y", "Z", "W");
Class("Direction", Options.All, "Z", "X", "Z", "Y");
#>
}
<#+
[Flags]
enum Options
{
    Fields = 1,
    Equals = 2,
    HashCode = 4,
    All = -1,
}

List<string> geometryTypes;

void GeometryTypes(params string[] names)
{
    geometryTypes = names.ToList();
#>
    public enum GeometryType
    {
        <#= string.Join(", ", names) #>
    }
<#+    
}

void Class(string name, Options options, params string[] args)
{
    var lt = name.IndexOf('<');
    var generic = lt >= 0 ? name.Substring(0, lt) : name;
    var fields = Enumerable.Range(0, args.Length / 2).Select(i => new KeyValuePair<string, string>(args[2 * i], args[2 * i + 1])).ToArray();
#>

    public sealed partial class <#= name #> : IEquatable<<#= name #>><#= geometryTypes.Contains(name) ? ", IGeometry" : string.Empty #>
    {
        private <#= generic #>(<#= string.Join(string.Empty, fields.Select(field => $"{field.Key} {field.Value}, ")) #>bool _)
        {
<#+
    foreach (var field in fields)
    {
#>
            this.<#= field.Value #> = <#= field.Value #>;
<#+    
    }
#>
        }

<#+
    var gi = geometryTypes.IndexOf(name);

    if (gi >= 0)
    {
#>
        public GeometryType GeometryType => GeometryType.<#= name #>;

        public bool Intersects(IGeometry other)
        {
            switch (other)
            {
<#+
        for (var go = 0; go <= gi; go++)
        {
            var lc = geometryTypes[go].ToLowerInvariant();
#>
                case <#= geometryTypes[go] #> <#= lc #>:
                    return IntersectsInternal(<#= lc #>);

<#+        
        }
#>
                default:
                    return other.Intersects(this);
            }
        }

        public IGeometry Intersection(IGeometry other)
        {
            switch (other)
            {
<#+
        for (var go = 0; go <= gi; go++)
        {
            var lc = geometryTypes[go].ToLowerInvariant();
#>
                case <#= geometryTypes[go] #> <#= lc #>:
                    return IntersectionInternal(<#= lc #>);

<#+        
        }
#>
                default:
                    return other.Intersection(this);
            }
        }

        internal bool IntersectsInternal(Empty empty) => false;

        internal IGeometry IntersectionInternal(Empty empty) => Empty.Geometry;
        
<#+    
    }

    foreach (var field in fields)
    {
#>
        public <#= field.Key #> <#= field.Value #> { get; }

<#+    
    }

    if (options.HasFlag(Options.Equals))
    {
#>
        public bool Equals(<#= name #> other) => <#= fields.Any() ? string.Join(" && ", fields.Select(field => $"other.{field.Value}.Equals({field.Value})")) : "true" #>;

<#+
    }
#>
        public override bool Equals(object obj) => obj is <#= name #> other && Equals(other);

        private static readonly int SessionHash = HashCode.Combine("<#= name #>", System.Diagnostics.Stopwatch.GetTimestamp());

        public override int GetHashCode() => <#= fields.Any() ? "HashCode.Combine(SessionHash, " + string.Join(", ", fields.Take(7).Select(field => field.Value)) + ")" : "SessionHash" #>;

        public static bool operator ==(<#= name #> a, <#= name #> b) => a.Equals(b);

        public static bool operator !=(<#= name #> a, <#= name #> b) => !a.Equals(b);
    }
<#+
}
#>